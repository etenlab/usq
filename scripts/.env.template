# -*- mode: sh; -*-

# This file can be used to define environment variables which change
# the defaults for different command line options. Arguments from the
# CLI are parsed using `yargs`, which will look into the runtime
# environment for any option not explicitly passed in by the user:
#
# http://yargs.js.org/docs/#api-reference-envprefix
#
# This file serves as a template that can be checked into version
# control. As a developer, you should make a copy of this file and
# name it `.env`. The values defined there will then be pulled in by
# the `dotenv` library.
#
# https://www.npmjs.com/package/dotenv
#
# If you are developing using the docker-compose.yml and schema.sql
# files in this project, then the default values should work out of
# the box.

#######################################
# CONNECTING TO THE POSTGRES DATABASE #
#######################################

# The following variables define how to set up a connect to a postgres
# server and can be used instead of the following cli options:
#   -u / --postgres-user
#   -h / --postgres-host
#   -d / --postgres-database
#   -s / --postgres-password
#   -p / --postgres-port

# USQ_POSTGRES_USER="postgres"
# USQ_POSTGRES_HOST="localhost"
# USQ_POSTGRES_DATABASE="postgres"
# USQ_POSTGRES_PASSWORD="postgres"
# USQ_POSTGRES_PORT=5432

####################################################
# ASSOC A USFM FILE WITH A COLLECTION AND LANGUAGE #
####################################################

# As a given usfm file is being transpiled into SQL, it will be shaped
# into a collection of related tables that ultimately get linked to a
# single collection and language. If more than one usfm is being
# processed at the same time, they will all be associated with the
# same collection and language.
#
# These variables define which collection a USFM file belongs to and
# can be used instead of the following:
#    -n / --collection-name
#    -l / --language-index
#    -i / --language-id

# USQ_COLLECTION_NAME="us_ENG"
# USQ_LANGUAGE_INDEX="_fake_index_1"
# USQ_LANGUAGE_ID=1

################################################
# DEFINING WORD BOUNDRIES FOR A GIVEN LANGUAGE #
################################################

# Becaue there is no way to garuentee that the word boundry matcher
# (\b) will work across different languages, locales, and charsets,
# more general regular expressions are used. This script needs one to
# split text into tokens and another to distinguish words from
# sequences of punctuation. There are some caveats for writing these:
#
# 1. The word regex needs to account for multiple unicode characters
# for the same punctuation mark: for example, a USFM file might use
# "’" (Right Single Quotation Mark U+2019) instead of "'" (Apostrophe
# U+0027). If a language has punctuation marks, like the English
# apostrophe, that are in the middle of a word then the regex needs to
# account for all varients in the charset.
#
# 2. The token regex is going to be passed to String.prototype.split,
# which consumes the delimeter when splitting a string; however, the
# any punctuation that signals a word boundry should _not_ be consumed
# because it is a meaningful part of the text. For example, if we said
# that any non-word character is part of the delimeter (/[^\w]+/),
# then all punctuation would be dropped from the string and never make
# it into the database. To prevent this. use lookahead and look behind
# assertions:
#   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions

# These variables can be used instead of the following:
#    -w / --word-regex
#    -t / --token-regex

# USQ_WORD_REGEX="/[\w’]+/"
# USQ_TOKEN_REGEX="/([\w’]+)|([^\s\w’]+)/g"
